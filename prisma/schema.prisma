// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  username      String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  days          day[]

}

model day {
    id            String  @id @default(cuid())
    singleday     DateTime
    typeOfDay     String?
    targetWorkingTimeInSeconds  Int?
    timestamp     timestamp[]
    workingTimeInSeconds   Int?
    breakTimeInSeconds     Int?
    user          User @relation(fields: [dayId], references: [id], onDelete: Cascade)
    dayId         String
}

model timestamp {
  id            String  @id @default(cuid())
  stamp         DateTime?
  office        Boolean?
  user          day @relation(fields: [timestampId], references: [id], onDelete: Cascade)
  timestampId   String
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}